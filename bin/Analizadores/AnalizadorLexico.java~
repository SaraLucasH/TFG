/* The following code was generated by JFlex 1.7.0 */

 package Analizadores;
import java.util.LinkedList;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/saral/OneDrive/Documentos/GitHub/TFG/src/Analizadores/AnalizadorLexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;
  public static final int estado2 = 4;
  public static final int estado3 = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\60\1\62\1\62\1\61\22\0\1\16\1\0\1\55"+
    "\2\0\1\7\1\54\1\40\1\27\1\26\1\41\1\56\1\10\1\11"+
    "\1\12\1\15\12\6\1\13\1\5\1\45\1\53\1\47\2\0\1\17"+
    "\31\3\1\42\1\0\1\42\3\0\32\2\1\30\1\0\1\33\7\0"+
    "\1\62\32\0\1\25\11\0\1\46\1\37\2\0\1\50\1\0\1\51"+
    "\4\0\1\36\1\0\1\44\2\0\1\52\1\34\1\0\1\31\3\0"+
    "\1\4\7\0\1\4\3\0\1\4\3\0\1\4\1\0\1\4\3\0"+
    "\1\32\2\0\1\4\4\0\1\43\1\0\1\1\7\0\1\1\3\0"+
    "\1\1\3\0\1\1\1\0\1\1\2\0\1\1\3\0\1\1\1\0"+
    "\1\1\u029f\0\1\14\24\0\1\20\1\24\1\21\10\0\1\35\u1c65\0"+
    "\1\23\5\0\1\62\1\62\370\0\1\22\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udeed\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\2\2\1\1\3\1\2\3\1\1\4"+
    "\1\5\1\6\1\2\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\2\47\1\50\1\51\1\52\1\53"+
    "\3\54\7\53\1\55\1\56\4\1\2\3\1\0\1\3"+
    "\1\0\1\3\1\1\2\0\1\1\2\0\2\1\2\0"+
    "\1\54\3\0\1\54\1\0\3\54\1\0\1\54\1\0"+
    "\1\54\13\0\1\1\5\0\2\3\1\0\1\3\1\0"+
    "\3\3\2\0\1\1\1\0\1\1\2\54\5\0\2\54"+
    "\1\0\1\54\1\0\3\54\1\57\6\0\1\1\2\3"+
    "\2\0\1\3\1\0\3\3\1\0\3\1\1\0\2\54"+
    "\2\0\1\54\1\0\3\54\4\0\1\3\2\0\3\3"+
    "\1\1\1\54\2\0\3\54\1\0\1\3\1\0\1\3"+
    "\1\54\1\0\1\54\1\0\1\3\1\0\1\54\2\3"+
    "\2\54\1\0\1\3\1\0\1\54\1\3\1\54\1\3"+
    "\1\54\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\314\0\u01cb\0\u01fe\0\314\0\u0231\0\314\0\u0264"+
    "\0\314\0\u0297\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u0264\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\u02ca\0\314\0\314\0\314\0\314\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\314\0\314\0\u0297\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u0264\0\u085e\0\u0891"+
    "\0\u03c9\0\u042f\0\u04c8\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0495\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0594\0\u0d26\0\u0d59\0\314\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u075f\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u095d\0\u1089"+
    "\0\u10bc\0\314\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\314\0\u1254\0\u1287\0\u12ba\0\u0fbd\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\u151e\0\u1551\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u194d\0\u1bb1\0\u1be4\0\u1ab2\0\u1c17"+
    "\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf"+
    "\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47"+
    "\0\u1eae\0\u1ee1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\12\1\17\1\20\1\21\1\22\1\10"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\2\62"+
    "\1\63\1\0\11\64\1\65\15\64\1\66\33\64\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\67"+
    "\1\77\1\74\1\67\1\100\1\67\1\101\1\72\6\67"+
    "\1\102\7\67\1\100\52\67\1\103\34\67\64\0\2\6"+
    "\2\0\1\12\3\0\1\14\1\12\1\14\2\0\1\104"+
    "\45\0\1\6\1\105\2\0\1\12\3\0\1\106\1\107"+
    "\1\14\2\0\1\104\45\0\2\110\1\111\1\112\1\0"+
    "\1\113\2\0\1\114\1\115\4\0\1\111\44\0\2\110"+
    "\2\112\4\0\1\114\5\0\1\112\50\0\1\12\1\116"+
    "\1\14\1\117\1\120\1\121\3\0\1\104\51\0\1\12"+
    "\4\0\1\12\3\0\1\104\47\0\2\122\12\0\1\122"+
    "\44\0\2\123\61\0\2\124\2\122\1\12\1\116\1\14"+
    "\1\0\1\125\1\12\1\14\1\126\1\0\1\104\1\127"+
    "\16\0\1\126\104\0\1\62\3\0\2\130\2\0\1\131"+
    "\3\0\1\132\1\131\1\132\2\0\1\133\7\0\1\102"+
    "\35\0\1\130\1\134\2\0\1\131\3\0\1\135\1\136"+
    "\1\132\2\0\1\133\7\0\1\102\35\0\2\137\1\140"+
    "\1\141\1\0\1\142\2\0\1\143\1\144\4\0\1\140"+
    "\44\0\2\137\2\141\4\0\1\143\5\0\1\141\61\0"+
    "\1\145\7\0\1\102\41\0\1\131\1\146\1\132\1\147"+
    "\1\150\1\151\3\0\1\133\7\0\1\102\41\0\1\131"+
    "\4\0\1\131\3\0\1\133\7\0\1\102\37\0\2\152"+
    "\12\0\1\152\44\0\2\153\61\0\2\154\2\152\1\131"+
    "\1\146\1\132\1\0\1\155\1\131\1\132\1\156\1\0"+
    "\1\133\1\157\6\0\1\102\7\0\1\156\25\0\1\6"+
    "\1\160\2\0\1\12\3\0\1\106\1\12\1\14\2\0"+
    "\1\104\47\0\1\161\1\0\1\12\4\0\1\12\3\0"+
    "\1\104\1\161\45\0\2\162\13\0\1\162\44\0\2\163"+
    "\2\164\4\0\1\165\1\0\1\165\3\0\1\164\45\0"+
    "\1\166\1\167\1\170\1\0\1\171\2\0\1\114\5\0"+
    "\1\167\46\0\2\170\4\0\1\114\5\0\1\170\46\0"+
    "\1\172\2\0\1\173\10\0\1\172\46\0\2\174\12\0"+
    "\1\174\45\0\1\162\1\175\13\0\1\175\50\0\1\12"+
    "\1\116\1\14\1\117\1\176\1\121\3\0\1\104\52\0"+
    "\1\177\57\0\1\161\2\0\1\200\10\0\1\161\51\0"+
    "\1\200\55\0\2\6\75\0\1\201\46\0\2\124\2\0"+
    "\1\12\3\0\1\202\1\12\1\202\2\0\1\104\47\0"+
    "\2\122\1\12\4\0\1\12\3\0\1\104\1\122\44\0"+
    "\2\6\13\0\1\14\45\0\2\203\2\0\1\131\3\0"+
    "\1\132\1\131\1\132\2\0\1\133\7\0\1\102\35\0"+
    "\1\203\1\204\2\0\1\131\3\0\1\135\1\131\1\132"+
    "\2\0\1\133\7\0\1\102\37\0\1\205\1\0\1\131"+
    "\4\0\1\131\3\0\1\133\1\205\6\0\1\102\36\0"+
    "\2\206\12\0\1\145\1\206\6\0\1\102\35\0\2\207"+
    "\2\210\4\0\1\211\1\0\1\211\3\0\1\210\45\0"+
    "\1\212\1\213\1\214\1\0\1\215\2\0\1\143\5\0"+
    "\1\213\46\0\2\214\4\0\1\143\5\0\1\214\46\0"+
    "\1\216\2\0\1\217\10\0\1\216\46\0\2\220\12\0"+
    "\1\220\45\0\1\206\1\221\13\0\1\221\71\0\1\222"+
    "\41\0\1\131\1\146\1\132\1\147\1\223\1\151\3\0"+
    "\1\133\7\0\1\102\42\0\1\224\57\0\1\205\2\0"+
    "\1\225\10\0\1\205\51\0\1\225\7\0\1\145\7\0"+
    "\1\102\35\0\2\226\75\0\1\227\46\0\2\154\2\0"+
    "\1\131\3\0\1\230\1\131\1\230\2\0\1\133\7\0"+
    "\1\102\37\0\2\152\1\131\4\0\1\131\3\0\1\133"+
    "\1\152\6\0\1\102\35\0\2\226\13\0\1\132\45\0"+
    "\1\6\1\231\2\0\1\12\3\0\1\106\1\12\1\14"+
    "\2\0\1\104\47\0\1\232\13\0\1\232\55\0\1\233"+
    "\51\0\2\234\63\0\2\164\4\0\1\235\5\0\1\164"+
    "\45\0\1\166\1\236\1\237\1\0\1\171\2\0\1\114"+
    "\5\0\1\236\46\0\2\237\4\0\1\114\5\0\1\237"+
    "\51\0\1\173\62\0\1\240\62\0\1\166\57\0\2\241"+
    "\12\0\1\241\55\0\1\242\56\0\1\177\2\0\2\176"+
    "\55\0\1\12\1\200\1\0\1\243\1\0\1\244\3\0"+
    "\1\104\45\0\2\245\61\0\2\246\2\0\1\12\4\0"+
    "\1\12\3\0\1\104\45\0\2\226\2\0\1\131\3\0"+
    "\1\132\1\131\1\132\2\0\1\133\7\0\1\102\35\0"+
    "\1\226\1\247\2\0\1\131\3\0\1\135\1\131\1\132"+
    "\2\0\1\133\7\0\1\102\37\0\1\250\13\0\1\250"+
    "\55\0\1\251\51\0\2\252\63\0\2\210\4\0\1\253"+
    "\5\0\1\210\45\0\1\212\1\254\1\255\1\0\1\215"+
    "\2\0\1\143\5\0\1\254\46\0\2\255\4\0\1\143"+
    "\5\0\1\255\51\0\1\217\62\0\1\256\62\0\1\212"+
    "\57\0\2\257\12\0\1\257\55\0\1\260\56\0\1\225"+
    "\62\0\1\224\2\0\2\223\55\0\1\131\1\225\1\0"+
    "\1\261\1\0\1\262\3\0\1\133\7\0\1\102\35\0"+
    "\2\263\61\0\2\264\2\0\1\131\4\0\1\131\3\0"+
    "\1\133\7\0\1\102\35\0\2\6\2\0\1\12\3\0"+
    "\1\106\1\12\1\14\2\0\1\104\47\0\1\265\13\0"+
    "\1\265\45\0\2\266\13\0\1\266\44\0\2\234\6\0"+
    "\1\267\1\0\1\267\52\0\2\164\12\0\1\164\45\0"+
    "\1\166\1\270\2\0\1\171\2\0\1\114\5\0\1\270"+
    "\54\0\1\114\54\0\1\172\13\0\1\172\46\0\2\271"+
    "\12\0\1\271\45\0\1\266\1\272\13\0\1\272\51\0"+
    "\1\273\55\0\2\245\2\0\1\12\4\0\1\12\3\0"+
    "\1\104\45\0\2\246\2\0\1\12\3\0\1\267\1\12"+
    "\1\267\2\0\1\104\45\0\2\226\2\0\1\131\3\0"+
    "\1\135\1\131\1\132\2\0\1\133\7\0\1\102\37\0"+
    "\1\274\13\0\1\274\45\0\2\275\13\0\1\275\44\0"+
    "\2\252\6\0\1\276\1\0\1\276\52\0\2\210\12\0"+
    "\1\210\45\0\1\212\1\277\2\0\1\215\2\0\1\143"+
    "\5\0\1\277\54\0\1\143\54\0\1\216\13\0\1\216"+
    "\46\0\2\300\12\0\1\300\45\0\1\275\1\301\13\0"+
    "\1\301\51\0\1\302\62\0\1\302\7\0\1\145\7\0"+
    "\1\102\35\0\2\263\2\0\1\131\4\0\1\131\3\0"+
    "\1\133\7\0\1\102\35\0\2\264\2\0\1\131\3\0"+
    "\1\276\1\131\1\276\2\0\1\133\7\0\1\102\37\0"+
    "\1\166\13\0\1\166\55\0\1\303\51\0\2\246\62\0"+
    "\1\166\1\304\13\0\1\304\46\0\2\166\12\0\1\166"+
    "\55\0\1\305\55\0\1\12\1\273\3\0\1\12\3\0"+
    "\1\104\47\0\1\212\13\0\1\212\55\0\1\306\51\0"+
    "\2\264\62\0\1\212\1\307\13\0\1\307\46\0\2\212"+
    "\12\0\1\212\55\0\1\310\55\0\1\131\1\302\3\0"+
    "\1\131\3\0\1\133\7\0\1\102\36\0\2\311\13\0"+
    "\1\311\45\0\1\311\1\312\13\0\1\312\45\0\2\313"+
    "\13\0\1\313\45\0\1\313\1\314\13\0\1\314\55\0"+
    "\1\315\62\0\1\316\62\0\1\317\62\0\1\320\52\0"+
    "\2\321\13\0\1\321\45\0\1\321\1\322\13\0\1\322"+
    "\45\0\2\323\13\0\1\323\45\0\1\323\1\324\13\0"+
    "\1\324\55\0\1\166\62\0\1\325\62\0\1\212\62\0"+
    "\1\326\53\0\1\327\13\0\1\327\46\0\1\330\13\0"+
    "\1\330\55\0\1\331\62\0\1\332\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8058];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\11\4\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\16\11\1\1\21\11\1\1"+
    "\4\11\12\1\2\11\6\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\2\0\2\1\2\0\1\1\3\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\13\0\1\1"+
    "\5\0\1\11\1\1\1\0\1\1\1\0\3\1\2\0"+
    "\1\1\1\0\3\1\5\0\1\11\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\6\0\3\1\2\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\2\1\2\0\1\1\1\0"+
    "\3\1\4\0\1\1\2\0\5\1\2\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\5\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer aux = new StringBuffer();
     	int auxLinea = 0;
     	int auxColumna = 0;
	String varAux="";
	String posibleLF="";
	Acronimo acronimo=new Acronimo();
	FormaLarga f=new FormaLarga();
	int offset=0;
	
	FormaLargaWithAc acWLf=new FormaLargaWithAc ();
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {  return new Symbol(sym.EOF, null); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { posibleLF=yytext();				
				yybegin(estado1);
				acWLf.clean();
				acWLf.setFormaLarga(new FormaLarga(posibleLF,offset,offset+yytext().length()));
				offset=offset+yytext().length();
				System.out.println("lf");
            } 
            // fall through
          case 48: break;
          case 2: 
            { System.err.println("Error lexico: caracter no reconocido <" + yytext() + "> en la linea " + (yyline+1) 
	+ " y columna " + (yycolumn +1));
	offset=offset+yytext().length();
            } 
            // fall through
          case 49: break;
          case 3: 
            { System.out.println("Acronimo");
				offset=offset+yytext().length();
				return new Symbol(sym.acronimo,yyline +1, yycolumn +1,new Acronimo(offset-yytext().length(),offset,yytext()));
            } 
            // fall through
          case 50: break;
          case 4: 
            { //Coma
				offset=offset+yytext().length();
            } 
            // fall through
          case 51: break;
          case 5: 
            { //barra -
				System.out.println("Barra -");
				offset=offset+yytext().length();
            } 
            // fall through
          case 52: break;
          case 6: 
            { //Simbolo dos puntos
				offset=offset+yytext().length();
            } 
            // fall through
          case 53: break;
          case 7: 
            { //Barra / 
				offset=offset+yytext().length();
            } 
            // fall through
          case 54: break;
          case 8: 
            { System.out.println("space "+yytext().length());offset=offset+yytext().length();
            } 
            // fall through
          case 55: break;
          case 9: 
            { //Alpha
		System.out.println("Alpha");offset=offset+yytext().length();
            } 
            // fall through
          case 56: break;
          case 10: 
            { //gamma
		System.out.println("Gamma");offset=offset+yytext().length();
            } 
            // fall through
          case 57: break;
          case 11: 
            { //tm
		offset=offset+yytext().length();
            } 
            // fall through
          case 58: break;
          case 12: 
            { //Bala
		offset=offset+yytext().length();
            } 
            // fall through
          case 59: break;
          case 13: 
            { //Beta
		System.out.println("beta "+yytext().length());
		offset=offset+yytext().length();
            } 
            // fall through
          case 60: break;
          case 14: 
            { //Espacio de no separacion
		offset=offset+yytext().length();
            } 
            // fall through
          case 61: break;
          case 15: 
            { //Si detecta frases explicatorias entre parentesis
				offset=offset+yytext().length();
            } 
            // fall through
          case 62: break;
          case 16: 
            { //Si hay acronimos en una frase no detectara el parentesis, pues al principio estaba en el estado 1
				yypushback(yytext().length());
				yybegin(estado1);
            } 
            // fall through
          case 63: break;
          case 17: 
            { //Corchete derecho { 
				offset=offset+yytext().length();
            } 
            // fall through
          case 64: break;
          case 18: 
            { //fraccion 1 medio 
				offset=offset+yytext().length();
            } 
            // fall through
          case 65: break;
          case 19: 
            { //Aspa multiplicacion
				offset=offset+yytext().length();
            } 
            // fall through
          case 66: break;
          case 20: 
            { //Corchete izq } 
				offset=offset+yytext().length();
            } 
            // fall through
          case 67: break;
          case 21: 
            { //comillas latinas cierre
				offset=offset+yytext().length();
            } 
            // fall through
          case 68: break;
          case 22: 
            { //Simbolo micro
				offset=offset+yytext().length();
            } 
            // fall through
          case 69: break;
          case 23: 
            { //comillas latinas apertura
				offset=offset+yytext().length();
            } 
            // fall through
          case 70: break;
          case 24: 
            { //comilla simple
				offset=offset+yytext().length();
            } 
            // fall through
          case 71: break;
          case 25: 
            { //asterisco
				offset=offset+yytext().length();
            } 
            // fall through
          case 72: break;
          case 26: 
            { //Corchetes 
				offset=offset+yytext().length();
            } 
            // fall through
          case 73: break;
          case 27: 
            { //minúscula S aguda 
				offset=offset+yytext().length();
            } 
            // fall through
          case 74: break;
          case 28: 
            { //Punto centrado
				offset=offset+yytext().length();
            } 
            // fall through
          case 75: break;
          case 29: 
            { //Simbolo menor que
				offset=offset+yytext().length();
            } 
            // fall through
          case 76: break;
          case 30: 
            { //a sufijo
				offset=offset+yytext().length();
            } 
            // fall through
          case 77: break;
          case 31: 
            { //Simbolo mayor que
				offset=offset+yytext().length();
            } 
            // fall through
          case 78: break;
          case 32: 
            { //Simbolo registro
				offset=offset+yytext().length();
            } 
            // fall through
          case 79: break;
          case 33: 
            { //Simbolo grados
				offset=offset+yytext().length();
            } 
            // fall through
          case 80: break;
          case 34: 
            { //Simbolo ordinal
				offset=offset+yytext().length();
            } 
            // fall through
          case 81: break;
          case 35: 
            { //Simbolo igual
				offset=offset+yytext().length();
            } 
            // fall through
          case 82: break;
          case 36: 
            { //Ampersan 
				offset=offset+yytext().length();
            } 
            // fall through
          case 83: break;
          case 37: 
            { //Comilla "
				offset=offset+yytext().length();
            } 
            // fall through
          case 84: break;
          case 38: 
            { //Sumatorio	
				offset=offset+yytext().length();
            } 
            // fall through
          case 85: break;
          case 39: 
            { acronimo=new Acronimo(); offset=offset+yytext().length(); posibleLF="";
            } 
            // fall through
          case 86: break;
          case 40: 
            { String b=yytext();
			if(b!=null){
				yypushback(b.length());
				acWLf.clean();
			}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 87: break;
          case 41: 
            { offset=offset+yytext().length();
            } 
            // fall through
          case 88: break;
          case 42: 
            { offset=offset+yytext().length();yybegin(estado2);
		System.out.println("pa");
            } 
            // fall through
          case 89: break;
          case 43: 
            { if(yytext()!=null){
			yypushback(yytext().length());
			acWLf.clean();}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 90: break;
          case 44: 
            { System.out.println("Acronimo");
			acronimo= new Acronimo(offset,offset+yytext().length(),yytext());
			offset=offset+yytext().length();
			acWLf.setAcronimo(acronimo);
			yybegin(estado3);
			System.out.println("ac");
            } 
            // fall through
          case 91: break;
          case 45: 
            { offset=offset+yytext().length(); yybegin(YYINITIAL); acWLf.clean();
            } 
            // fall through
          case 92: break;
          case 46: 
            { offset=offset+yytext().length();yybegin(YYINITIAL);
		System.out.println("pc");
		//Cuidado si le paso el objeto en el sintactico lo usa como puntero y solo se guarda la ultima ocurrencia. Por ello new Object
		return new Symbol(sym.acWithLf,yyline+1,yycolumn+1,new FormaLargaWithAc(acWLf.getAcronimo(),acWLf.getFormaLarga()));
            } 
            // fall through
          case 93: break;
          case 47: 
            { offset=offset+yytext().length();yybegin(YYINITIAL); acWLf.clean();
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
