/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java.util.LinkedList;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/saral/OneDrive/Documentos/GitHub/TFG/src/Analizadores/AnalizadorLexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;
  public static final int estado2 = 4;
  public static final int estado3 = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    24, 24, 24, 24, 24, 24, 24, 24, 24, 17, 18, 22, 22, 19, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
     8, 24, 15, 24, 24, 14, 24, 20, 13, 12, 24, 24, 16,  6, 10, 21, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  7, 11, 24, 24, 24, 24, 
    24,  9,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 24, 24, 24, 24, 24, 
    24,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 22, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24,  4, 24, 24, 24, 24, 24, 24, 24,  4, 24, 24, 24,  4, 24, 24, 
    24,  4, 24,  4, 24, 24, 24, 24, 24, 24,  4, 24, 24, 24, 24, 24, 
    24,  1, 24, 24, 24, 24, 24, 24, 24,  1, 24, 24, 24,  1, 24, 24, 
    24,  1, 24,  1, 24, 24, 24, 24, 24, 24,  1, 24, 24, 24, 24, 24
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\2\2\1\1\3\1\2\1\1\1\4"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\2\12\1\2"+
    "\1\13\1\14\1\15\2\14\1\16\4\14\1\17\1\20"+
    "\3\1\1\0\5\3\1\1\2\0\1\1\10\0\5\16"+
    "\6\0\1\1\2\0\4\3\4\0\4\16\1\0\1\1"+
    "\4\3\1\0\4\16\1\3\1\0\2\3\1\16\1\0"+
    "\2\16\1\3\1\0\1\3\1\16\1\0\1\16\1\0"+
    "\1\3\1\0\1\16\2\3\2\16\1\0\1\3\1\0"+
    "\1\16\1\3\1\16\1\3\1\16\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"+
    "\0\310\0\341\0\372\0\144\0\144\0\144\0\144\0\144"+
    "\0\144\0\144\0\u0113\0\u012c\0\144\0\144\0\144\0\u0145"+
    "\0\u015e\0\u0177\0\u0190\0\u01a9\0\u01c2\0\u01db\0\144\0\144"+
    "\0\u01f4\0\372\0\u020d\0\u0226\0\u023f\0\175\0\u0258\0\u0271"+
    "\0\u028a\0\u02a3\0\u02bc\0\310\0\u02d5\0\u02ee\0\u0307\0\u0145"+
    "\0\u0320\0\u01c2\0\u01db\0\u0339\0\u0352\0\u036b\0\u0145\0\u0384"+
    "\0\u039d\0\u03b6\0\u03cf\0\u03e8\0\u0190\0\u0401\0\u041a\0\u0433"+
    "\0\u044c\0\u0465\0\u047e\0\144\0\u0497\0\u04b0\0\u04c9\0\u04e2"+
    "\0\u04fb\0\u0514\0\u052d\0\144\0\u0546\0\u055f\0\u0578\0\u0591"+
    "\0\u05aa\0\u05c3\0\u05dc\0\u05f5\0\u060e\0\u0627\0\u0640\0\u0659"+
    "\0\u0672\0\u068b\0\u06a4\0\u06bd\0\u06d6\0\u06ef\0\u0708\0\u0721"+
    "\0\u073a\0\u0753\0\u076c\0\u06d6\0\u0785\0\u079e\0\u073a\0\u07b7"+
    "\0\u07d0\0\u07e9\0\u0802\0\u081b\0\u0834\0\u084d\0\u0866\0\u087f"+
    "\0\u0898\0\u08b1\0\u08ca\0\u08e3\0\u08fc\0\u0915\0\u092e\0\u0947"+
    "\0\u08fc\0\u0915";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\2\5\1\13"+
    "\1\10\2\14\1\15\1\16\1\17\1\20\1\21\2\22"+
    "\1\23\1\24\1\25\2\0\1\5\15\26\1\27\13\26"+
    "\1\0\1\30\1\31\1\32\1\33\1\34\2\26\1\35"+
    "\1\32\2\36\1\37\12\26\1\0\15\26\1\40\14\26"+
    "\32\0\2\6\4\0\1\41\1\42\1\0\2\14\16\0"+
    "\1\6\1\43\3\0\1\44\1\41\1\42\1\0\1\45"+
    "\1\14\16\0\1\6\1\46\1\47\1\0\1\50\3\0"+
    "\1\47\1\51\17\0\2\6\33\0\1\52\1\53\1\0"+
    "\1\42\1\0\2\14\16\0\2\6\2\54\1\55\1\0"+
    "\1\41\1\42\1\56\2\14\37\0\1\22\26\0\1\57"+
    "\11\0\2\60\4\0\1\61\1\62\1\0\2\63\1\37"+
    "\15\0\1\60\1\64\3\0\1\65\1\61\1\62\1\0"+
    "\1\66\1\63\1\37\15\0\1\60\1\67\1\70\1\0"+
    "\1\71\3\0\1\70\1\72\17\0\2\60\33\0\1\73"+
    "\1\74\1\0\1\62\1\0\2\63\1\37\15\0\2\60"+
    "\2\75\1\76\1\0\1\61\1\62\1\77\2\63\1\37"+
    "\24\0\1\100\3\0\1\37\24\0\1\42\1\0\2\14"+
    "\16\0\1\6\1\101\3\0\1\44\1\41\1\42\1\0"+
    "\2\14\20\0\1\102\5\0\1\102\21\0\2\103\5\0"+
    "\1\103\21\0\1\104\1\105\1\0\1\50\3\0\1\105"+
    "\24\0\1\106\25\0\1\103\1\107\5\0\1\107\24\0"+
    "\1\52\1\110\1\0\1\42\1\0\2\14\20\0\1\102"+
    "\1\0\1\55\3\0\1\102\24\0\1\55\2\0\1\42"+
    "\1\0\2\14\16\0\2\6\5\0\1\41\44\0\1\22"+
    "\14\0\1\62\1\0\2\63\1\37\15\0\1\60\1\111"+
    "\3\0\1\65\1\61\1\62\1\0\2\63\1\37\17\0"+
    "\1\112\5\0\1\112\21\0\2\113\4\0\1\100\1\113"+
    "\2\0\1\37\16\0\1\114\1\115\1\0\1\71\3\0"+
    "\1\115\24\0\1\116\25\0\1\113\1\117\5\0\1\117"+
    "\24\0\1\73\1\120\1\0\1\62\1\0\2\63\1\37"+
    "\17\0\1\112\1\0\1\76\3\0\1\112\24\0\1\76"+
    "\2\0\1\62\1\0\2\63\1\37\15\0\2\60\5\0"+
    "\1\61\34\0\1\37\15\0\1\6\1\121\3\0\1\44"+
    "\1\41\1\42\1\0\2\14\20\0\1\122\5\0\1\122"+
    "\31\0\1\123\20\0\1\104\1\124\1\0\1\50\3\0"+
    "\1\124\24\0\1\104\35\0\1\125\23\0\1\55\24\0"+
    "\1\60\1\126\3\0\1\65\1\61\1\62\1\0\2\63"+
    "\1\37\17\0\1\127\5\0\1\127\31\0\1\130\20\0"+
    "\1\114\1\131\1\0\1\71\3\0\1\131\24\0\1\114"+
    "\35\0\1\132\23\0\1\76\24\0\2\6\3\0\1\44"+
    "\1\41\1\42\1\0\2\14\20\0\1\133\5\0\1\133"+
    "\21\0\2\134\5\0\1\134\21\0\1\104\1\135\1\0"+
    "\1\50\3\0\1\135\21\0\1\134\1\136\5\0\1\136"+
    "\20\0\2\60\3\0\1\65\1\61\1\62\1\0\2\63"+
    "\1\37\17\0\1\137\5\0\1\137\21\0\2\140\5\0"+
    "\1\140\21\0\1\114\1\141\1\0\1\71\3\0\1\141"+
    "\21\0\1\140\1\142\5\0\1\142\22\0\1\104\5\0"+
    "\1\104\31\0\1\143\20\0\1\104\1\144\5\0\1\144"+
    "\31\0\1\145\21\0\1\114\5\0\1\114\31\0\1\146"+
    "\20\0\1\114\1\147\5\0\1\147\31\0\1\150\20\0"+
    "\2\151\5\0\1\151\21\0\1\151\1\152\5\0\1\152"+
    "\21\0\2\153\5\0\1\153\21\0\1\153\1\154\5\0"+
    "\1\154\31\0\1\155\30\0\1\156\30\0\1\157\30\0"+
    "\1\160\20\0\2\161\5\0\1\161\21\0\1\161\1\162"+
    "\5\0\1\162\21\0\2\163\5\0\1\163\21\0\1\163"+
    "\1\164\5\0\1\164\31\0\1\104\30\0\1\165\30\0"+
    "\1\114\30\0\1\166\21\0\1\167\5\0\1\167\22\0"+
    "\1\170\5\0\1\170\31\0\1\171\30\0\1\172\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\11\6\1\7\11\2\1\3\11\7\1"+
    "\2\11\3\1\1\0\6\1\2\0\1\1\10\0\5\1"+
    "\6\0\1\1\2\0\1\11\3\1\4\0\1\11\3\1"+
    "\1\0\5\1\1\0\5\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\5\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer aux = new StringBuffer();
     	int auxLinea = 0;
     	int auxColumna = 0;
	String varAux="";
	String posibleLF="";
	String acronimo="";
	FormaLargaWithAc acWLf=new FormaLargaWithAc ();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {  return new Symbol(sym.EOF, null); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { posibleLF=yytext();
				yybegin(estado1);
				acWLf.clean();
				acWLf.setFormaLarga(posibleLF);
				System.out.println("lf");
            } 
            // fall through
          case 17: break;
          case 2: 
            { System.err.println("Error lexico: caracter no reconocido <" + yytext() + "> en la linea " + (yyline+1) 
	+ " y columna " + (yycolumn +1));
            } 
            // fall through
          case 18: break;
          case 3: 
            { return new Symbol(sym.acronimo,yyline +1, yycolumn +1,yytext());
            } 
            // fall through
          case 19: break;
          case 4: 
            { System.out.println("space");
            } 
            // fall through
          case 20: break;
          case 5: 
            { //Si detecta frases explicatorias entre parentesis
				;
            } 
            // fall through
          case 21: break;
          case 6: 
            { //Si hay acronimos en una frase no detectara el parentesis, pues al principio estaba en el estado 1
				yypushback(yytext().length());
				yybegin(estado1);
            } 
            // fall through
          case 22: break;
          case 7: 
            { //Porcentaje
				;
            } 
            // fall through
          case 23: break;
          case 8: 
            { //Comilla "
				;
            } 
            // fall through
          case 24: break;
          case 9: 
            { ;
            } 
            // fall through
          case 25: break;
          case 10: 
            { acronimo=""; posibleLF="";
            } 
            // fall through
          case 26: break;
          case 11: 
            { //Barra / 
			;
            } 
            // fall through
          case 27: break;
          case 12: 
            { yypushback(yytext().length());
			acWLf.clean();
			yybegin(YYINITIAL);
            } 
            // fall through
          case 28: break;
          case 13: 
            { yybegin(estado2);
		System.out.println("pa");
            } 
            // fall through
          case 29: break;
          case 14: 
            { acronimo=yytext();
			acWLf.setAcronimo(acronimo);
			yybegin(estado3);
			System.out.println("ac");
            } 
            // fall through
          case 30: break;
          case 15: 
            { yybegin(YYINITIAL); acWLf.clean();
            } 
            // fall through
          case 31: break;
          case 16: 
            { yybegin(YYINITIAL);
		System.out.println("pc");
		//Cuidado si le paso el objeto en el sintactico lo usa como puntero y solo se guarda la ultima ocurrencia. Por ello new Object
		return new Symbol(sym.acWithLf,yyline+1,yycolumn+1,new FormaLargaWithAc(acWLf.getAcronimo(),acWLf.getFormaLarga()));
            } 
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
