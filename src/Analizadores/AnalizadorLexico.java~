/* The following code was generated by JFlex 1.7.0 */

 package Analizadores;
import java.util.LinkedList;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/saral/OneDrive/Documentos/GitHub/TFG/src/Analizadores/AnalizadorLexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;
  public static final int estado2 = 4;
  public static final int estado3 = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    40, 40, 40, 40, 40, 40, 40, 40, 40, 35, 36, 38, 38, 37, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    14, 40, 33, 40, 40,  7, 40, 21, 17, 16, 22, 34,  8,  9, 10, 13, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 11,  5, 26, 32, 28, 40, 
    40, 15,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 23, 40, 23, 40, 40, 
    40,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 38, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 27, 20, 40, 40, 29, 40, 
    30, 40, 40, 40, 40, 19, 40, 25, 40, 40, 31, 18, 40, 40, 40, 40, 
    40,  4, 40, 40, 40, 40, 40, 40, 40,  4, 40, 40, 40,  4, 40, 40, 
    40,  4, 40,  4, 40, 40, 40, 40, 40, 40,  4, 40, 40, 40, 40, 24, 
    40,  1, 40, 40, 40, 40, 40, 40, 40,  1, 40, 40, 40,  1, 40, 40, 
    40,  1, 40,  1, 40, 40,  1, 40, 40, 40,  1, 40,  1, 40, 40, 40
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\2\2\1\1\3\1\2\3\1\1\4"+
    "\1\5\1\6\1\2\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\34\1\35\1\36\1\37\2\40\1\41\6\40\1\0"+
    "\1\40\1\42\1\40\1\43\3\1\1\3\1\0\4\3"+
    "\1\1\2\0\1\1\2\0\2\1\10\0\1\41\1\0"+
    "\4\41\12\0\1\1\4\0\4\3\2\0\1\1\1\0"+
    "\1\1\5\0\4\41\5\0\1\1\2\3\2\0\2\3"+
    "\1\0\3\1\1\0\2\41\2\0\2\41\4\0\1\3"+
    "\2\0\2\3\1\1\1\41\2\0\2\41\1\0\1\3"+
    "\1\0\1\3\1\41\1\0\1\41\1\0\1\3\1\0"+
    "\1\41\2\3\2\41\1\0\1\3\1\0\1\41\1\3"+
    "\1\41\1\3\1\41\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\244\0\u0171\0\u019a\0\244\0\u01c3\0\244\0\u01ec"+
    "\0\244\0\u0215\0\244\0\244\0\244\0\u01ec\0\244\0\244"+
    "\0\244\0\244\0\244\0\244\0\244\0\244\0\244\0\244"+
    "\0\244\0\244\0\244\0\244\0\244\0\244\0\u023e\0\244"+
    "\0\244\0\244\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334"+
    "\0\u035d\0\244\0\u0386\0\u03af\0\u03d8\0\244\0\u03af\0\244"+
    "\0\u0215\0\u0401\0\u042a\0\u0453\0\u047c\0\u047c\0\u04a5\0\u04ce"+
    "\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616"+
    "\0\u063f\0\u01ec\0\u0668\0\u0267\0\u030b\0\u035d\0\u03d8\0\u0691"+
    "\0\u06ba\0\u06e3\0\u070c\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0"+
    "\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\244\0\u0a17"+
    "\0\u0a40\0\u0a69\0\u059b\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36"+
    "\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\244\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d"+
    "\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004"+
    "\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c"+
    "\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294"+
    "\0\u1123\0\u12bd\0\u12e6\0\u1219\0\u130f\0\u1338\0\u1361\0\u138a"+
    "\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2"+
    "\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u1524\0\u154d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\12\1\17\1\20\1\21\1\22\1\10"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\2\46\1\47\2\0\1\5\11\50"+
    "\1\51\7\50\1\52\27\50\1\0\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\57\1\62"+
    "\1\64\1\62\1\65\1\55\1\66\2\62\1\67\23\62"+
    "\1\0\21\62\1\70\30\62\52\0\2\6\2\0\1\12"+
    "\3\0\1\14\1\12\1\14\2\0\1\71\33\0\1\6"+
    "\1\72\2\0\1\12\3\0\1\73\1\74\1\14\2\0"+
    "\1\71\33\0\1\75\1\76\1\77\2\0\1\100\3\0"+
    "\1\101\4\0\1\77\32\0\2\75\53\0\1\12\1\102"+
    "\1\14\1\103\1\104\1\105\3\0\1\71\37\0\1\12"+
    "\4\0\1\12\3\0\1\71\35\0\2\106\12\0\1\106"+
    "\32\0\2\107\47\0\2\110\2\106\1\12\1\102\1\14"+
    "\1\0\1\111\1\12\1\14\1\112\1\0\1\71\1\113"+
    "\3\0\1\112\71\0\1\46\5\0\2\114\2\0\1\115"+
    "\3\0\1\116\1\115\1\116\2\0\1\117\1\0\1\66"+
    "\31\0\1\114\1\120\2\0\1\115\3\0\1\121\1\122"+
    "\1\116\2\0\1\117\1\0\1\66\31\0\1\123\1\124"+
    "\1\125\2\0\1\126\3\0\1\127\4\0\1\125\32\0"+
    "\2\123\64\0\1\130\1\0\1\66\35\0\1\115\1\131"+
    "\1\116\1\132\1\133\1\134\3\0\1\117\1\0\1\66"+
    "\35\0\1\115\4\0\1\115\3\0\1\117\1\0\1\66"+
    "\33\0\2\135\12\0\1\135\32\0\2\136\47\0\2\137"+
    "\2\135\1\115\1\131\1\116\1\0\1\140\1\115\1\116"+
    "\1\64\1\0\1\117\1\141\1\66\2\0\1\64\26\0"+
    "\1\6\1\142\2\0\1\12\3\0\1\73\1\12\1\14"+
    "\2\0\1\71\35\0\1\143\1\0\1\12\4\0\1\12"+
    "\3\0\1\71\1\143\33\0\2\144\13\0\1\144\32\0"+
    "\2\75\2\145\4\0\1\146\1\0\1\146\3\0\1\145"+
    "\33\0\1\147\1\150\2\0\1\100\10\0\1\150\37\0"+
    "\1\151\44\0\1\144\1\152\13\0\1\152\36\0\1\12"+
    "\1\102\1\14\1\103\1\153\1\105\3\0\1\71\40\0"+
    "\1\154\45\0\1\143\2\0\1\155\10\0\1\143\37\0"+
    "\1\155\43\0\2\6\63\0\1\156\34\0\2\110\2\0"+
    "\1\12\3\0\1\157\1\12\1\157\2\0\1\71\35\0"+
    "\2\106\1\12\4\0\1\12\3\0\1\71\1\106\32\0"+
    "\2\6\13\0\1\14\33\0\1\114\1\160\2\0\1\115"+
    "\3\0\1\121\1\115\1\116\2\0\1\117\1\0\1\66"+
    "\33\0\1\161\1\0\1\115\4\0\1\115\3\0\1\117"+
    "\1\161\1\66\32\0\2\162\12\0\1\130\1\162\1\66"+
    "\31\0\2\123\2\163\4\0\1\164\1\0\1\164\3\0"+
    "\1\163\33\0\1\165\1\166\2\0\1\126\10\0\1\166"+
    "\37\0\1\167\44\0\1\162\1\170\13\0\1\170\51\0"+
    "\1\66\35\0\1\115\1\131\1\116\1\132\1\171\1\134"+
    "\3\0\1\117\1\0\1\66\36\0\1\172\45\0\1\161"+
    "\2\0\1\173\10\0\1\161\37\0\1\173\7\0\1\130"+
    "\1\0\1\66\31\0\2\114\63\0\1\174\34\0\2\137"+
    "\2\0\1\115\3\0\1\175\1\115\1\175\2\0\1\117"+
    "\1\0\1\66\33\0\2\135\1\115\4\0\1\115\3\0"+
    "\1\117\1\135\1\66\31\0\2\114\13\0\1\116\33\0"+
    "\1\6\1\176\2\0\1\12\3\0\1\73\1\12\1\14"+
    "\2\0\1\71\35\0\1\177\13\0\1\177\43\0\1\200"+
    "\37\0\2\201\51\0\2\145\4\0\1\202\5\0\1\145"+
    "\33\0\1\147\1\203\2\0\1\100\10\0\1\203\37\0"+
    "\1\147\54\0\1\204\44\0\1\154\2\0\2\153\43\0"+
    "\1\12\1\155\1\0\1\205\1\0\1\206\3\0\1\71"+
    "\33\0\2\207\47\0\2\210\2\0\1\12\4\0\1\12"+
    "\3\0\1\71\33\0\1\114\1\211\2\0\1\115\3\0"+
    "\1\121\1\115\1\116\2\0\1\117\1\0\1\66\33\0"+
    "\1\212\13\0\1\212\43\0\1\213\37\0\2\214\51\0"+
    "\2\163\4\0\1\215\5\0\1\163\33\0\1\165\1\216"+
    "\2\0\1\126\10\0\1\216\37\0\1\165\54\0\1\217"+
    "\44\0\1\173\50\0\1\172\2\0\2\171\43\0\1\115"+
    "\1\173\1\0\1\220\1\0\1\221\3\0\1\117\1\0"+
    "\1\66\31\0\2\222\47\0\2\223\2\0\1\115\4\0"+
    "\1\115\3\0\1\117\1\0\1\66\31\0\2\6\2\0"+
    "\1\12\3\0\1\73\1\12\1\14\2\0\1\71\35\0"+
    "\1\224\13\0\1\224\33\0\2\225\13\0\1\225\32\0"+
    "\2\201\6\0\1\226\1\0\1\226\40\0\2\145\12\0"+
    "\1\145\33\0\1\147\1\227\2\0\1\100\10\0\1\227"+
    "\33\0\1\225\1\230\13\0\1\230\37\0\1\231\43\0"+
    "\2\207\2\0\1\12\4\0\1\12\3\0\1\71\33\0"+
    "\2\210\2\0\1\12\3\0\1\226\1\12\1\226\2\0"+
    "\1\71\33\0\2\114\2\0\1\115\3\0\1\121\1\115"+
    "\1\116\2\0\1\117\1\0\1\66\33\0\1\232\13\0"+
    "\1\232\33\0\2\233\13\0\1\233\32\0\2\214\6\0"+
    "\1\234\1\0\1\234\40\0\2\163\12\0\1\163\33\0"+
    "\1\165\1\235\2\0\1\126\10\0\1\235\33\0\1\233"+
    "\1\236\13\0\1\236\37\0\1\237\50\0\1\237\7\0"+
    "\1\130\1\0\1\66\31\0\2\222\2\0\1\115\4\0"+
    "\1\115\3\0\1\117\1\0\1\66\31\0\2\223\2\0"+
    "\1\115\3\0\1\234\1\115\1\234\2\0\1\117\1\0"+
    "\1\66\33\0\1\147\13\0\1\147\43\0\1\240\37\0"+
    "\2\210\50\0\1\147\1\241\13\0\1\241\43\0\1\242"+
    "\43\0\1\12\1\231\3\0\1\12\3\0\1\71\35\0"+
    "\1\165\13\0\1\165\43\0\1\243\37\0\2\223\50\0"+
    "\1\165\1\244\13\0\1\244\43\0\1\245\43\0\1\115"+
    "\1\237\3\0\1\115\3\0\1\117\1\0\1\66\32\0"+
    "\2\246\13\0\1\246\33\0\1\246\1\247\13\0\1\247"+
    "\33\0\2\250\13\0\1\250\33\0\1\250\1\251\13\0"+
    "\1\251\43\0\1\252\50\0\1\253\50\0\1\254\50\0"+
    "\1\255\40\0\2\256\13\0\1\256\33\0\1\256\1\257"+
    "\13\0\1\257\33\0\2\260\13\0\1\260\33\0\1\260"+
    "\1\261\13\0\1\261\43\0\1\147\50\0\1\262\50\0"+
    "\1\165\50\0\1\263\41\0\1\264\13\0\1\264\34\0"+
    "\1\265\13\0\1\265\43\0\1\266\50\0\1\267\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5576];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\11\4\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\3\11\1\1\20\11\1\1"+
    "\3\11\7\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\4\1\1\0\5\1\2\0\1\1\2\0\2\1"+
    "\10\0\1\1\1\0\4\1\12\0\1\1\4\0\1\11"+
    "\3\1\2\0\1\1\1\0\1\1\5\0\1\11\3\1"+
    "\5\0\3\1\2\0\2\1\1\0\3\1\1\0\2\1"+
    "\2\0\2\1\4\0\1\1\2\0\4\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\1\0\1\1\1\0\5\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer aux = new StringBuffer();
     	int auxLinea = 0;
     	int auxColumna = 0;
	String varAux="";
	String posibleLF="";
	String acronimo="";
	FormaLargaWithAc acWLf=new FormaLargaWithAc ();
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {  return new Symbol(sym.EOF, null); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { posibleLF=yytext();
				yybegin(estado1);
				acWLf.clean();
				acWLf.setFormaLarga(posibleLF);
				System.out.println("lf");
            } 
            // fall through
          case 36: break;
          case 2: 
            { System.err.println("Error lexico: caracter no reconocido <" + yytext() + "> en la linea " + (yyline+1) 
	+ " y columna " + (yycolumn +1));
            } 
            // fall through
          case 37: break;
          case 3: 
            { return new Symbol(sym.acronimo,yyline +1, yycolumn +1,yytext());
            } 
            // fall through
          case 38: break;
          case 4: 
            { //Coma
				;
            } 
            // fall through
          case 39: break;
          case 5: 
            { //barra -
				System.out.println("Barra -");
				;
            } 
            // fall through
          case 40: break;
          case 6: 
            { //Simbolo dos puntos
				;
            } 
            // fall through
          case 41: break;
          case 7: 
            { //Barra / 
			;
            } 
            // fall through
          case 42: break;
          case 8: 
            { System.out.println("space");
            } 
            // fall through
          case 43: break;
          case 9: 
            { //Si detecta frases explicatorias entre parentesis
				;
            } 
            // fall through
          case 44: break;
          case 10: 
            { //Si hay acronimos en una frase no detectara el parentesis, pues al principio estaba en el estado 1
				yypushback(yytext().length());
				yybegin(estado1);
            } 
            // fall through
          case 45: break;
          case 11: 
            { //comillas latinas cierre
				;
            } 
            // fall through
          case 46: break;
          case 12: 
            { //Simbolo micro
				;
            } 
            // fall through
          case 47: break;
          case 13: 
            { //comillas latinas apertura
				;
            } 
            // fall through
          case 48: break;
          case 14: 
            { //comilla simple
				;
            } 
            // fall through
          case 49: break;
          case 15: 
            { //asterisco
				;
            } 
            // fall through
          case 50: break;
          case 16: 
            { //Corchetes 
				;
            } 
            // fall through
          case 51: break;
          case 17: 
            { //minúscula S aguda 
				;
            } 
            // fall through
          case 52: break;
          case 18: 
            { //Punto centrado
				;
            } 
            // fall through
          case 53: break;
          case 19: 
            { //Simbolo menor que
				;
            } 
            // fall through
          case 54: break;
          case 20: 
            { //a sufijo
				;
            } 
            // fall through
          case 55: break;
          case 21: 
            { //Simbolo mayor que
				;
            } 
            // fall through
          case 56: break;
          case 22: 
            { //Simbolo registro
				;
            } 
            // fall through
          case 57: break;
          case 23: 
            { //Simbolo grados
				;
            } 
            // fall through
          case 58: break;
          case 24: 
            { //Simbolo ordinal
				;
            } 
            // fall through
          case 59: break;
          case 25: 
            { //Simbolo igual
				;
            } 
            // fall through
          case 60: break;
          case 26: 
            { //Comilla "
				;
            } 
            // fall through
          case 61: break;
          case 27: 
            { //Sumatorio	
				;
            } 
            // fall through
          case 62: break;
          case 28: 
            { acronimo=""; posibleLF="";
            } 
            // fall through
          case 63: break;
          case 29: 
            { String b=yytext();
			if(b!=null){
				yypushback(b.length());
				acWLf.clean();
			}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 64: break;
          case 30: 
            { ;
            } 
            // fall through
          case 65: break;
          case 31: 
            { yybegin(estado2);
		System.out.println("pa");
            } 
            // fall through
          case 66: break;
          case 32: 
            { if(yytext()!=null){
			yypushback(yytext().length());
			acWLf.clean();}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 67: break;
          case 33: 
            { acronimo=yytext();
			acWLf.setAcronimo(acronimo);
			yybegin(estado3);
			System.out.println("ac");
            } 
            // fall through
          case 68: break;
          case 34: 
            { yybegin(YYINITIAL); acWLf.clean();
            } 
            // fall through
          case 69: break;
          case 35: 
            { yybegin(YYINITIAL);
		System.out.println("pc");
		//Cuidado si le paso el objeto en el sintactico lo usa como puntero y solo se guarda la ultima ocurrencia. Por ello new Object
		return new Symbol(sym.acWithLf,yyline+1,yycolumn+1,new FormaLargaWithAc(acWLf.getAcronimo(),acWLf.getFormaLarga()));
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
