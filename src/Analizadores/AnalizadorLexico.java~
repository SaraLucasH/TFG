/* The following code was generated by JFlex 1.7.0 */

 package Analizadores;
import java.util.LinkedList;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/saral/OneDrive/Documentos/GitHub/TFG/src/Analizadores/AnalizadorLexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;
  public static final int estado2 = 4;
  public static final int estado3 = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\66\1\67\1\71\1\71\1\70\22\0\1\14\1\0\1\64"+
    "\2\0\1\7\1\63\1\47\1\36\1\35\1\50\1\65\1\10\1\11"+
    "\1\12\1\22\12\6\1\15\1\5\1\54\1\62\1\56\2\0\1\13"+
    "\31\3\1\51\1\0\1\51\3\0\2\2\1\16\10\2\1\20\1\17"+
    "\15\2\1\37\1\0\1\42\7\0\1\71\32\0\1\34\11\0\1\55"+
    "\1\46\2\0\1\57\1\0\1\60\1\24\3\0\1\45\1\0\1\53"+
    "\2\0\1\61\1\43\1\0\1\40\3\0\1\4\7\0\1\4\3\0"+
    "\1\4\3\0\1\4\1\0\1\4\3\0\1\41\2\0\1\4\4\0"+
    "\1\52\1\0\1\1\2\0\1\32\1\26\3\0\1\1\3\0\1\1"+
    "\3\0\1\1\1\0\1\1\2\0\1\1\3\0\1\1\1\0\1\1"+
    "\u029f\0\1\21\24\0\1\23\1\33\1\25\10\0\1\44\u1c57\0\1\30"+
    "\15\0\1\31\5\0\1\71\1\71\370\0\1\27\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udeed\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\0\1\2\3\3\1\2\1\4\1\5"+
    "\1\2\1\6\1\3\1\7\1\2\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\2\53\1\54\1\7\1\55\1\56\3\57\1\56\3\1"+
    "\1\56\1\57\2\56\1\60\1\3\2\0\1\3\1\0"+
    "\3\3\1\0\1\3\1\0\2\3\1\0\1\4\1\0"+
    "\2\4\6\0\1\57\1\1\1\57\1\1\3\57\1\0"+
    "\1\57\1\0\2\57\2\0\1\1\6\0\2\1\2\0"+
    "\1\3\1\0\1\3\3\0\1\3\3\0\1\3\3\0"+
    "\2\3\4\0\1\4\3\0\1\57\1\1\1\57\2\0"+
    "\1\1\1\57\3\0\1\57\3\0\2\57\2\0\3\1"+
    "\1\0\1\1\3\0\1\4\3\0\2\3\1\4\5\0"+
    "\1\3\1\0\4\3\1\4\1\0\1\4\1\0\3\1"+
    "\1\0\2\57\3\1\2\0\1\57\1\0\4\57\1\1"+
    "\1\0\1\1\1\0\1\3\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\1\0\1\4\2\0\4\3\3\0\1\57"+
    "\1\0\5\1\1\0\2\1\1\0\4\57\1\1\1\0"+
    "\1\3\5\0\1\4\2\0\2\3\1\0\1\57\2\1"+
    "\1\0\1\1\1\0\3\1\2\0\2\57\3\0\1\4"+
    "\1\0\1\4\1\0\1\3\2\0\2\1\1\0\2\1"+
    "\1\57\1\3\2\0\1\3\1\57\1\0\1\1\1\57"+
    "\1\0\1\3\1\0\1\57\1\3\1\57\1\3\1\57"+
    "\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\350\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\350\0\350\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\350\0\u032c\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\350\0\350\0\350\0\350\0\350\0\u0366\0\350\0\350"+
    "\0\350\0\350\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\350\0\u061e\0\u0658"+
    "\0\u0244\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u02f2"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u032c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0536\0\u0e46\0\u05aa"+
    "\0\u05e4\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\350\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u0984"+
    "\0\u1342\0\u137c\0\u13b6\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u0d98"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\350\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u0fdc"+
    "\0\u199a\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u11ac"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1294\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u0244\0\u1dae\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8"+
    "\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u171c\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u1172\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u1de8\0\u264a"+
    "\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a"+
    "\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea"+
    "\0\u2a24\0\u2a5e\0\u2440\0\u2a98\0\u2ad2\0\u2b0c\0\u2392\0\u2b46"+
    "\0\u24ee\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u28c8\0\u2e72"+
    "\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f5a\0\u2f94\0\u2fce\0\u3008"+
    "\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8"+
    "\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8"+
    "\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578"+
    "\0\u35b2\0\u3504\0\u353e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\12\1\15\1\12\1\16\1\17\1\12\3\7\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\2\65\1\66\1\0\11\67"+
    "\1\70\24\67\1\71\33\67\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\77\1\102\1\77\1\103"+
    "\1\104\1\77\3\74\1\105\23\72\1\105\61\72\1\106"+
    "\34\72\73\0\2\107\6\0\1\110\3\0\1\111\3\107"+
    "\52\0\1\107\1\112\6\0\1\113\1\114\2\0\1\111"+
    "\3\112\52\0\2\115\1\116\1\117\1\0\1\120\2\0"+
    "\1\121\1\122\1\116\2\0\3\115\52\0\2\115\2\117"+
    "\1\0\1\123\2\0\1\121\1\0\1\117\2\0\3\115"+
    "\56\0\1\12\1\124\1\111\1\125\1\126\1\127\1\0"+
    "\1\130\1\12\61\0\1\12\2\0\1\12\1\0\1\12"+
    "\1\0\1\130\1\12\57\0\2\131\6\0\1\131\57\0"+
    "\2\115\1\116\1\117\1\0\1\120\2\0\1\121\1\122"+
    "\1\116\1\111\1\0\3\115\52\0\2\132\3\0\1\133"+
    "\2\0\1\134\4\0\3\132\1\135\23\0\1\135\25\0"+
    "\2\136\13\0\3\136\140\0\1\65\3\0\2\137\6\0"+
    "\1\140\3\0\1\101\3\137\52\0\1\137\1\141\6\0"+
    "\1\142\1\143\2\0\1\101\3\141\52\0\2\144\1\145"+
    "\1\146\1\0\1\147\2\0\1\150\1\151\1\145\2\0"+
    "\3\144\52\0\2\144\2\146\1\0\1\152\2\0\1\150"+
    "\1\0\1\146\2\0\3\144\52\0\2\153\2\154\1\77"+
    "\1\155\1\101\1\77\1\156\1\77\1\157\1\160\1\77"+
    "\3\153\1\161\23\0\1\161\31\0\1\77\1\155\1\101"+
    "\1\77\1\162\1\77\1\0\1\160\1\77\61\0\1\77"+
    "\2\0\1\77\1\0\1\77\1\0\1\160\1\77\57\0"+
    "\2\163\6\0\1\163\57\0\2\144\1\145\1\146\1\0"+
    "\1\147\2\0\1\150\1\151\1\145\1\101\1\0\3\144"+
    "\52\0\2\164\3\0\1\165\2\0\1\166\4\0\3\164"+
    "\1\161\23\0\1\161\25\0\2\167\13\0\3\167\52\0"+
    "\2\170\6\0\1\110\3\0\1\111\3\170\56\0\1\12"+
    "\2\0\1\12\1\171\1\12\1\0\1\130\1\12\55\0"+
    "\1\170\1\172\6\0\1\113\3\0\1\111\3\172\54\0"+
    "\1\173\1\0\1\12\2\0\1\12\1\171\1\12\1\173"+
    "\1\130\1\12\56\0\2\174\7\0\1\174\2\0\3\174"+
    "\52\0\2\175\2\176\1\0\1\177\2\0\1\200\1\0"+
    "\1\176\1\201\1\200\3\175\53\0\1\176\1\202\1\203"+
    "\1\0\1\123\2\0\1\121\1\0\1\202\2\0\3\176"+
    "\54\0\2\203\1\0\1\123\2\0\1\121\1\0\1\203"+
    "\61\0\1\204\2\0\1\123\3\0\1\205\1\204\1\205"+
    "\60\0\2\206\6\0\1\206\60\0\1\174\1\207\7\0"+
    "\1\207\2\0\3\174\57\0\1\123\3\0\1\205\1\0"+
    "\1\205\62\0\1\12\1\124\1\111\1\125\1\210\1\127"+
    "\1\0\1\130\1\12\62\0\1\211\66\0\1\173\2\0"+
    "\1\212\4\0\1\173\64\0\1\212\64\0\2\132\13\0"+
    "\3\132\52\0\2\132\2\0\1\12\2\0\1\12\1\213"+
    "\1\12\1\0\1\130\1\214\3\132\56\0\1\12\1\124"+
    "\1\111\1\125\1\215\1\127\1\0\1\130\1\12\55\0"+
    "\2\216\13\0\3\216\73\0\1\217\50\0\2\220\6\0"+
    "\1\140\3\0\1\101\3\220\56\0\1\77\2\0\1\77"+
    "\1\221\1\77\1\0\1\160\1\77\55\0\1\220\1\222"+
    "\6\0\1\142\3\0\1\101\3\222\54\0\1\223\1\0"+
    "\1\77\2\0\1\77\1\221\1\77\1\223\1\160\1\77"+
    "\56\0\2\224\7\0\1\224\2\0\3\224\52\0\2\225"+
    "\2\226\1\0\1\227\2\0\1\230\1\0\1\226\1\231"+
    "\1\230\3\225\53\0\1\226\1\232\1\233\1\0\1\152"+
    "\2\0\1\150\1\0\1\232\2\0\3\226\54\0\2\233"+
    "\1\0\1\152\2\0\1\150\1\0\1\233\61\0\1\234"+
    "\2\0\1\152\3\0\1\235\1\234\1\235\60\0\2\236"+
    "\6\0\1\236\60\0\1\224\1\237\7\0\1\237\2\0"+
    "\3\224\57\0\1\152\3\0\1\235\1\0\1\235\56\0"+
    "\2\153\6\0\1\140\3\0\1\101\3\153\52\0\2\240"+
    "\13\0\3\240\56\0\1\77\1\155\1\101\1\77\1\241"+
    "\1\77\1\0\1\160\1\77\55\0\2\240\11\0\1\101"+
    "\1\0\3\240\54\0\1\223\2\0\1\242\4\0\1\223"+
    "\57\0\2\164\13\0\3\164\52\0\2\164\2\0\1\77"+
    "\2\0\1\77\1\243\1\77\1\0\1\160\1\244\3\164"+
    "\56\0\1\77\1\155\1\101\1\77\1\245\1\77\1\0"+
    "\1\160\1\77\55\0\2\246\13\0\3\246\73\0\1\247"+
    "\50\0\2\250\6\0\1\110\3\0\1\111\3\250\51\0"+
    "\5\251\1\252\2\251\1\252\1\251\1\252\1\251\2\252"+
    "\1\253\1\254\52\251\1\0\1\250\1\255\6\0\1\113"+
    "\3\0\1\111\3\255\54\0\1\256\7\0\1\256\70\0"+
    "\1\257\60\0\2\175\2\0\1\12\2\0\1\12\1\213"+
    "\1\12\1\0\1\260\1\214\3\175\52\0\2\176\3\0"+
    "\1\177\7\0\3\176\52\0\2\261\13\0\3\261\52\0"+
    "\2\262\3\0\1\263\2\0\1\264\4\0\3\262\1\265"+
    "\23\0\1\265\26\0\1\176\1\266\1\267\1\0\1\123"+
    "\2\0\1\121\1\0\1\266\2\0\3\176\54\0\2\267"+
    "\1\0\1\123\2\0\1\121\1\0\1\267\64\0\1\270"+
    "\71\0\1\271\66\0\2\272\6\0\1\272\70\0\1\273"+
    "\65\0\1\211\2\0\2\210\64\0\1\12\1\212\1\0"+
    "\1\274\1\0\1\274\1\0\1\130\1\12\55\0\2\261"+
    "\2\0\1\12\2\0\1\12\1\0\1\12\1\0\1\130"+
    "\1\12\3\261\54\0\2\275\1\0\1\212\4\0\1\275"+
    "\57\0\2\216\2\0\1\12\2\0\1\12\1\111\1\12"+
    "\1\0\1\130\1\276\3\216\52\0\2\277\13\0\3\277"+
    "\51\0\16\300\1\301\1\302\52\300\1\0\1\153\1\303"+
    "\6\0\1\142\3\0\1\101\3\303\54\0\1\304\7\0"+
    "\1\304\70\0\1\305\60\0\2\225\2\0\1\77\2\0"+
    "\1\77\1\243\1\77\1\0\1\231\1\244\3\225\52\0"+
    "\2\226\3\0\1\227\7\0\3\226\52\0\2\306\13\0"+
    "\3\306\52\0\2\307\3\0\1\310\2\0\1\311\4\0"+
    "\3\307\1\312\23\0\1\312\26\0\1\226\1\313\1\314"+
    "\1\0\1\152\2\0\1\150\1\0\1\313\2\0\3\226"+
    "\54\0\2\314\1\0\1\152\2\0\1\150\1\0\1\314"+
    "\64\0\1\315\71\0\1\316\66\0\2\317\6\0\1\317"+
    "\70\0\1\320\60\0\2\225\6\0\1\230\2\0\1\231"+
    "\1\230\3\225\57\0\1\242\70\0\1\77\1\242\1\0"+
    "\1\77\1\0\1\77\1\0\1\160\1\77\55\0\2\306"+
    "\2\0\1\77\2\0\1\77\1\0\1\77\1\0\1\160"+
    "\1\77\3\306\52\0\2\321\2\154\1\77\1\155\1\101"+
    "\1\77\1\156\1\77\1\157\1\160\1\77\3\321\1\161"+
    "\23\0\1\161\27\0\2\322\1\0\1\242\4\0\1\322"+
    "\57\0\2\246\2\0\1\77\2\0\1\77\1\101\1\77"+
    "\1\0\1\160\1\77\3\246\52\0\2\323\13\0\3\323"+
    "\51\0\5\251\1\252\2\251\1\252\1\251\1\252\1\251"+
    "\2\252\61\251\1\252\2\251\1\252\1\251\1\252\1\251"+
    "\2\252\1\251\1\324\57\251\1\252\2\251\1\252\1\251"+
    "\1\252\1\251\2\252\2\251\1\324\51\251\1\0\2\250"+
    "\6\0\1\113\3\0\1\111\3\250\54\0\1\325\7\0"+
    "\1\325\60\0\2\326\7\0\1\326\2\0\3\326\52\0"+
    "\2\261\2\0\1\12\2\0\1\12\1\200\1\12\1\0"+
    "\1\130\1\327\3\261\52\0\2\262\2\0\1\12\2\0"+
    "\1\12\1\330\1\12\1\0\1\260\1\331\3\262\56\0"+
    "\1\12\1\332\1\333\1\334\1\335\1\336\1\0\1\260"+
    "\1\12\55\0\2\337\13\0\3\337\52\0\2\340\13\0"+
    "\3\340\53\0\1\176\1\341\2\0\1\342\2\0\1\121"+
    "\1\0\1\341\2\0\3\176\62\0\1\121\63\0\1\204"+
    "\7\0\1\204\61\0\2\343\6\0\1\343\60\0\1\326"+
    "\1\344\7\0\1\344\2\0\3\326\57\0\1\345\64\0"+
    "\2\346\13\0\3\346\52\0\2\277\2\0\1\12\2\0"+
    "\1\12\1\0\1\12\1\0\1\130\1\12\3\277\51\0"+
    "\111\300\1\347\72\300\1\347\51\300\1\0\2\153\6\0"+
    "\1\142\3\0\1\101\3\153\54\0\1\350\7\0\1\350"+
    "\60\0\2\351\7\0\1\351\2\0\3\351\52\0\2\306"+
    "\2\0\1\77\2\0\1\77\1\230\1\77\1\0\1\160"+
    "\1\244\3\306\52\0\2\307\2\0\1\77\2\0\1\77"+
    "\1\352\1\77\1\0\1\231\1\353\3\307\56\0\1\77"+
    "\1\354\1\355\1\356\1\357\1\360\1\0\1\231\1\77"+
    "\55\0\2\361\13\0\3\361\52\0\2\362\13\0\3\362"+
    "\53\0\1\226\1\363\2\0\1\364\2\0\1\150\1\0"+
    "\1\363\2\0\3\226\62\0\1\150\63\0\1\234\7\0"+
    "\1\234\61\0\2\365\6\0\1\365\60\0\1\351\1\366"+
    "\7\0\1\366\2\0\3\351\52\0\2\321\2\0\1\77"+
    "\2\0\1\77\1\367\1\77\1\0\1\160\1\244\3\321"+
    "\52\0\2\370\13\0\3\370\52\0\2\323\2\0\1\77"+
    "\2\0\1\77\1\0\1\77\1\0\1\160\1\77\3\323"+
    "\51\0\72\251\3\0\1\176\7\0\1\176\70\0\1\371"+
    "\60\0\2\372\2\0\1\12\2\0\1\12\1\171\1\12"+
    "\1\0\1\260\1\12\3\372\52\0\2\372\2\0\1\12"+
    "\2\0\1\12\1\0\1\12\1\0\1\260\1\12\3\372"+
    "\56\0\1\12\1\332\1\333\1\334\1\373\1\336\1\0"+
    "\1\260\1\12\61\0\1\12\2\0\1\12\1\0\1\12"+
    "\1\0\1\260\1\12\62\0\1\374\66\0\2\375\1\0"+
    "\1\376\4\0\1\375\64\0\1\376\64\0\2\337\2\0"+
    "\1\12\2\0\1\12\1\333\1\12\1\0\1\260\1\377"+
    "\3\337\73\0\1\u0100\51\0\1\176\1\u0101\7\0\1\u0101"+
    "\2\0\3\176\57\0\1\u0102\66\0\2\176\6\0\1\176"+
    "\70\0\1\u0103\64\0\1\12\1\345\1\0\1\12\1\0"+
    "\1\12\1\0\1\130\1\12\55\0\2\346\6\0\1\u0104"+
    "\4\0\3\346\54\0\1\226\7\0\1\226\70\0\1\u0105"+
    "\60\0\2\u0106\2\0\1\77\2\0\1\77\1\221\1\77"+
    "\1\0\1\231\1\77\3\u0106\52\0\2\u0107\2\154\1\77"+
    "\1\155\1\101\1\77\1\156\1\77\1\157\1\231\1\77"+
    "\3\u0107\1\161\23\0\1\161\31\0\1\77\1\354\1\355"+
    "\1\356\1\u0108\1\360\1\0\1\231\1\77\61\0\1\77"+
    "\2\0\1\77\1\0\1\77\1\0\1\231\1\77\55\0"+
    "\2\153\2\154\1\77\1\u0109\1\101\1\77\1\156\1\77"+
    "\1\157\1\160\1\77\3\153\1\161\23\0\1\161\27\0"+
    "\2\u010a\1\0\1\u010b\4\0\1\u010a\57\0\2\153\2\154"+
    "\1\77\1\u010c\1\101\1\77\1\156\1\77\1\157\1\160"+
    "\1\77\3\153\1\161\23\0\1\161\25\0\2\361\2\0"+
    "\1\77\2\0\1\77\1\355\1\77\1\0\1\231\1\u010d"+
    "\3\361\73\0\1\u010e\51\0\1\226\1\u010f\7\0\1\u010f"+
    "\2\0\3\226\57\0\1\u0110\66\0\2\226\6\0\1\226"+
    "\70\0\1\u0111\60\0\2\306\2\0\1\77\2\0\1\77"+
    "\1\221\1\77\1\0\1\160\1\77\3\306\52\0\2\370"+
    "\6\0\1\u0112\4\0\3\370\53\0\2\u0113\7\0\1\u0113"+
    "\2\0\3\u0113\52\0\2\372\2\0\1\12\2\0\1\12"+
    "\1\u0114\1\12\1\0\1\260\1\u0115\3\372\57\0\1\374"+
    "\2\0\2\373\60\0\2\u0116\13\0\3\u0116\56\0\1\12"+
    "\1\376\1\0\1\u0117\1\0\1\u0117\1\0\1\260\1\12"+
    "\55\0\2\u0118\13\0\3\u0118\57\0\1\176\65\0\1\u0113"+
    "\1\u0119\7\0\1\u0119\2\0\3\u0113\54\0\2\217\6\0"+
    "\1\217\60\0\2\u011a\7\0\1\u011a\2\0\3\u011a\52\0"+
    "\2\u0106\2\0\1\77\2\0\1\77\1\u011b\1\77\1\0"+
    "\1\231\1\u011c\3\u0106\52\0\2\u0107\2\0\1\77\2\0"+
    "\1\77\1\u011d\1\77\1\0\1\231\1\u011c\3\u0107\57\0"+
    "\1\u010b\70\0\1\77\1\u0109\1\101\1\77\1\u0108\1\360"+
    "\1\0\1\160\1\77\55\0\2\u011e\13\0\3\u011e\56\0"+
    "\1\77\1\u010b\1\0\1\u011f\1\0\1\u011f\1\0\1\231"+
    "\1\77\61\0\1\77\1\u010c\1\101\1\u011f\1\241\1\u011f"+
    "\1\0\1\231\1\77\55\0\2\153\2\154\1\77\1\155"+
    "\1\101\1\77\1\156\1\77\1\157\1\231\1\77\3\153"+
    "\1\161\23\0\1\161\25\0\2\u0120\13\0\3\u0120\57\0"+
    "\1\226\65\0\1\u011a\1\u0121\7\0\1\u0121\2\0\3\u011a"+
    "\54\0\2\247\6\0\1\247\70\0\1\u0122\60\0\2\372"+
    "\13\0\3\372\52\0\2\u0116\6\0\1\u0123\4\0\3\u0116"+
    "\57\0\1\u0124\64\0\2\u0118\2\0\1\12\2\0\1\12"+
    "\1\0\1\12\1\0\1\260\1\12\3\u0118\63\0\1\u0125"+
    "\71\0\1\u0126\60\0\2\u0106\13\0\3\u0106\52\0\2\u0107"+
    "\2\154\1\77\1\155\1\101\1\77\1\156\1\77\1\157"+
    "\1\160\1\77\3\u0107\1\161\23\0\1\161\25\0\2\u0106"+
    "\2\0\1\77\2\0\1\77\1\221\1\77\1\0\1\160"+
    "\1\77\3\u0106\52\0\2\u011e\6\0\1\u0127\4\0\3\u011e"+
    "\52\0\2\153\2\154\1\77\1\u0128\1\101\1\77\1\156"+
    "\1\77\1\157\1\160\1\77\3\153\1\161\23\0\1\161"+
    "\25\0\2\u0120\2\0\1\77\2\0\1\77\1\0\1\77"+
    "\1\0\1\231\1\77\3\u0120\63\0\1\u0129\61\0\2\u012a"+
    "\7\0\1\u012a\2\0\3\u012a\54\0\2\u0100\6\0\1\u0100"+
    "\63\0\1\12\1\u0124\1\0\1\12\1\0\1\12\1\0"+
    "\1\260\1\12\56\0\1\u012a\1\u012b\7\0\1\u012b\2\0"+
    "\3\u012a\53\0\2\u012c\7\0\1\u012c\2\0\3\u012c\54\0"+
    "\2\u010e\6\0\1\u010e\63\0\1\77\1\u0128\1\101\1\77"+
    "\1\241\1\77\1\0\1\231\1\77\56\0\1\u012c\1\u012d"+
    "\7\0\1\u012d\2\0\3\u012c\63\0\1\176\71\0\1\u012e"+
    "\71\0\1\226\71\0\1\u012f\62\0\1\u0130\7\0\1\u0130"+
    "\61\0\1\u0131\7\0\1\u0131\70\0\1\u0132\71\0\1\u0133"+
    "\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13804];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\0\1\11\4\1\1\11\6\1\23\11"+
    "\1\1\21\11\1\1\4\11\13\1\1\11\1\1\2\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\6\0\7\1\1\0\1\1\1\0"+
    "\2\1\2\0\1\1\6\0\2\1\2\0\1\1\1\0"+
    "\1\1\3\0\1\11\3\0\1\1\3\0\2\1\4\0"+
    "\1\1\3\0\3\1\2\0\1\1\1\11\3\0\1\1"+
    "\3\0\2\1\2\0\3\1\1\0\1\1\3\0\1\1"+
    "\3\0\3\1\5\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\3\1\1\0\5\1\2\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\2\0\4\1\3\0\1\1"+
    "\1\0\5\1\1\0\2\1\1\0\5\1\1\0\1\1"+
    "\5\0\1\1\2\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\3\1\2\0\2\1\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\4\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\5\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer aux = new StringBuffer();
     	int auxLinea = 0;
     	int auxColumna = 0;
	String varAux="";
	String posibleLF="";
	Acronimo acronimo=new Acronimo();
	
	//FormaLarga f=new FormaLarga();
	
	int offset=0;
	
	AcWithContext acWC=new AcWithContext();
	//FormaLargaWithAc acWLfacWLf=new FormaLargaWithAc ();
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 268) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { posibleLF=yytext(); offset=offset+yytext().length();return new Symbol(sym.frase,posibleLF);
            } 
            // fall through
          case 49: break;
          case 2: 
            { System.err.println("Error lexico: caracter no reconocido <" + yytext() + "> en la linea " + (yyline+1) 
	+ " y columna " + (yycolumn +1));
	offset=offset+yytext().length();
            } 
            // fall through
          case 50: break;
          case 3: 
            { offset=offset+yytext().length();
				return new Symbol(sym.acWithContext,yyline +1, yycolumn +1,new AcWithContext(new Acronimo(offset-yytext().length(),offset,yytext()),posibleLF));
            } 
            // fall through
          case 51: break;
          case 4: 
            { posibleLF=yytext();				
				yybegin(estado1);
				offset=offset+yytext().length();
				
				return new Symbol(sym.frase,posibleLF);
            } 
            // fall through
          case 52: break;
          case 5: 
            { //NUMERO
				offset=offset+yytext().length();
            } 
            // fall through
          case 53: break;
          case 6: 
            { //barra -
				offset=offset+yytext().length();
            } 
            // fall through
          case 54: break;
          case 7: 
            { offset=offset+yytext().length();
            } 
            // fall through
          case 55: break;
          case 8: 
            { //Barra / 
				offset=offset+yytext().length();
            } 
            // fall through
          case 56: break;
          case 9: 
            { //Alpha
		offset=offset+yytext().length();
            } 
            // fall through
          case 57: break;
          case 10: 
            { //mas menos
		offset=offset+yytext().length();
            } 
            // fall through
          case 58: break;
          case 11: 
            { //gamma
		offset=offset+yytext().length();
            } 
            // fall through
          case 59: break;
          case 12: 
            { //a con anillo encima 
		offset=offset+yytext().length();
            } 
            // fall through
          case 60: break;
          case 13: 
            { //tm
		offset=offset+yytext().length();
            } 
            // fall through
          case 61: break;
          case 14: 
            { //guion largo 
		offset=offset+yytext().length();
            } 
            // fall through
          case 62: break;
          case 15: 
            { //Bala
		offset=offset+yytext().length();
            } 
            // fall through
          case 63: break;
          case 16: 
            { //a minuscula dieresis
		offset=offset+yytext().length();
            } 
            // fall through
          case 64: break;
          case 17: 
            { //Beta
		offset=offset+yytext().length();
            } 
            // fall through
          case 65: break;
          case 18: 
            { //Espacio de no separacion
		offset=offset+yytext().length();
            } 
            // fall through
          case 66: break;
          case 19: 
            { //Si detecta frases explicatorias entre parentesis
				offset=offset+yytext().length();
            } 
            // fall through
          case 67: break;
          case 20: 
            { //Si hay acronimos en una frase no detectara el parentesis, pues al principio estaba en el estado 1
				yypushback(yytext().length());
				yybegin(estado1);
            } 
            // fall through
          case 68: break;
          case 21: 
            { //Corchete derecho { 
				offset=offset+yytext().length();
            } 
            // fall through
          case 69: break;
          case 22: 
            { //fraccion 1 medio 
				offset=offset+yytext().length();
            } 
            // fall through
          case 70: break;
          case 23: 
            { //Aspa multiplicacion
				offset=offset+yytext().length();
            } 
            // fall through
          case 71: break;
          case 24: 
            { //Corchete izq } 
				offset=offset+yytext().length();
            } 
            // fall through
          case 72: break;
          case 25: 
            { //comillas latinas cierre
				offset=offset+yytext().length();
            } 
            // fall through
          case 73: break;
          case 26: 
            { //Simbolo micro
				offset=offset+yytext().length();
            } 
            // fall through
          case 74: break;
          case 27: 
            { //comillas latinas apertura
				offset=offset+yytext().length();
            } 
            // fall through
          case 75: break;
          case 28: 
            { //comilla simple
				offset=offset+yytext().length();
            } 
            // fall through
          case 76: break;
          case 29: 
            { //asterisco
				offset=offset+yytext().length();
            } 
            // fall through
          case 77: break;
          case 30: 
            { //Corchetes 
				offset=offset+yytext().length();
            } 
            // fall through
          case 78: break;
          case 31: 
            { //minúscula S aguda 
				offset=offset+yytext().length();
            } 
            // fall through
          case 79: break;
          case 32: 
            { //Punto centrado
				offset=offset+yytext().length();
            } 
            // fall through
          case 80: break;
          case 33: 
            { //Simbolo menor que
				offset=offset+yytext().length();
            } 
            // fall through
          case 81: break;
          case 34: 
            { //a sufijo
				offset=offset+yytext().length();
            } 
            // fall through
          case 82: break;
          case 35: 
            { //Simbolo mayor que
				offset=offset+yytext().length();
            } 
            // fall through
          case 83: break;
          case 36: 
            { //Simbolo registro
				offset=offset+yytext().length();
            } 
            // fall through
          case 84: break;
          case 37: 
            { //Simbolo grados
				offset=offset+yytext().length();
            } 
            // fall through
          case 85: break;
          case 38: 
            { //Simbolo ordinal
				offset=offset+yytext().length();
            } 
            // fall through
          case 86: break;
          case 39: 
            { //Simbolo igual
				offset=offset+yytext().length();
            } 
            // fall through
          case 87: break;
          case 40: 
            { //Ampersan 
				offset=offset+yytext().length();
            } 
            // fall through
          case 88: break;
          case 41: 
            { //Comilla "
				offset=offset+yytext().length();
            } 
            // fall through
          case 89: break;
          case 42: 
            { //Sumatorio	
				offset=offset+yytext().length();
            } 
            // fall through
          case 90: break;
          case 43: 
            { acronimo=new Acronimo(); offset=offset+yytext().length(); posibleLF="";
            } 
            // fall through
          case 91: break;
          case 44: 
            { String b=yytext();
			if(b!=null){
				yypushback(b.length());
			}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 92: break;
          case 45: 
            { offset=offset+yytext().length();yybegin(estado2);
            } 
            // fall through
          case 93: break;
          case 46: 
            { if(yytext()!=null){
			yypushback(yytext().length());
			}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 94: break;
          case 47: 
            { acronimo= new Acronimo(offset,offset+yytext().length(),yytext());
			offset=offset+yytext().length();
			yybegin(estado3);
            } 
            // fall through
          case 95: break;
          case 48: 
            { offset=offset+yytext().length();yybegin(YYINITIAL);
		
		//Cuidado si le paso el objeto en el sintactico lo usa como puntero y solo se guarda la ultima ocurrencia. Por ello new Object
		return new Symbol(sym.acWithContext,yyline +1, yycolumn +1,new AcWithContext(new Acronimo(acronimo.getStartOffset(),acronimo.getEndOffset(),acronimo.getAcronimo()),posibleLF));
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
