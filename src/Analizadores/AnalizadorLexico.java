/* The following code was generated by JFlex 1.7.0 */

 package Analizadores;
import java.util.LinkedList;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/saral/OneDrive/Documentos/GitHub/TFG/src/Analizadores/AnalizadorLexico.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int estado1 = 2;
  public static final int estado2 = 4;
  public static final int estado3 = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    33, 33, 33, 33, 33, 33, 33, 33, 33, 27, 28, 31, 31, 29, 33, 33, 
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 
     8, 33, 24, 33, 33, 23, 33, 17, 13, 12, 18, 25, 26,  6, 10, 30, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  7, 11, 19, 33, 33, 33, 
    33,  9,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 33, 33, 33, 33, 33, 
    33,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 33, 33, 33, 33, 33, 
    33, 33, 33, 33, 33, 31, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 
    33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 16, 33, 33, 20, 33, 
    21, 33, 33, 33, 33, 15, 33, 33, 33, 33, 22, 14, 33, 33, 33, 33, 
    33,  4, 33, 33, 33, 33, 33, 33, 33,  4, 33, 33, 33,  4, 33, 33, 
    33,  4, 33,  4, 33, 33, 33, 33, 33, 33,  4, 33, 33, 33, 33, 33, 
    33,  1, 33, 33, 33, 33, 33, 33, 33,  1, 33, 33, 33,  1, 33, 33, 
    33,  1, 33,  1, 33, 33,  1, 33, 33, 33,  1, 33,  1, 33, 33, 33
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\2\2\1\1\3\1\2\1\1\1\4"+
    "\1\5\1\6\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\26\1\27\1\30\1\31\2\32\1\33"+
    "\5\32\1\34\1\35\3\1\1\0\5\3\1\1\2\0"+
    "\1\1\10\0\5\33\6\0\1\1\2\0\4\3\4\0"+
    "\4\33\1\0\1\1\4\3\1\0\4\33\1\3\1\0"+
    "\2\3\1\33\1\0\2\33\1\3\1\0\1\3\1\33"+
    "\1\0\1\33\1\0\1\3\1\0\1\33\2\3\2\33"+
    "\1\0\1\3\1\0\1\33\1\3\1\33\1\3\1\33"+
    "\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\210\0\210\0\u0154\0\210\0\210\0\210"+
    "\0\210\0\210\0\210\0\u0176\0\210\0\210\0\210\0\210"+
    "\0\210\0\210\0\210\0\210\0\210\0\210\0\u0198\0\210"+
    "\0\210\0\210\0\u01ba\0\u01dc\0\u01fe\0\u0220\0\u0242\0\210"+
    "\0\u0264\0\u0286\0\210\0\210\0\u02a8\0\u0154\0\u02ca\0\u02ec"+
    "\0\u030e\0\252\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u0110"+
    "\0\u03da\0\u03fc\0\u041e\0\u01ba\0\u0440\0\u0264\0\u0286\0\u0462"+
    "\0\u0484\0\u04a6\0\u01ba\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550"+
    "\0\u0220\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\210"+
    "\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\210"+
    "\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a"+
    "\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a"+
    "\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u094c"+
    "\0\u0a3a\0\u0a5c\0\u09d4\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06"+
    "\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16"+
    "\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e\0\u0c38\0\u0c5a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\10\2\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\36\1\37\1\40\2\0\1\5\15\41"+
    "\1\42\24\41\1\0\1\43\1\44\1\45\1\46\1\47"+
    "\2\50\1\51\1\45\2\52\1\53\23\50\1\0\15\50"+
    "\1\54\25\50\43\0\2\6\4\0\1\55\1\56\1\0"+
    "\2\16\27\0\1\6\1\57\3\0\1\60\1\55\1\56"+
    "\1\0\1\61\1\16\27\0\1\6\1\62\1\63\1\0"+
    "\1\64\3\0\1\63\1\65\30\0\2\6\44\0\1\66"+
    "\1\67\1\0\1\56\1\0\2\16\27\0\2\6\2\70"+
    "\1\71\1\0\1\55\1\56\1\72\2\16\60\0\1\73"+
    "\43\0\1\36\6\0\2\74\4\0\1\75\1\76\1\0"+
    "\2\77\1\53\26\0\1\74\1\100\3\0\1\101\1\75"+
    "\1\76\1\0\1\102\1\77\1\53\26\0\1\74\1\103"+
    "\1\104\1\0\1\105\3\0\1\104\1\106\30\0\2\74"+
    "\44\0\1\107\1\110\1\0\1\76\1\0\2\77\1\53"+
    "\26\0\2\74\2\111\1\112\1\0\1\75\1\76\1\113"+
    "\2\77\1\53\35\0\1\114\3\0\1\53\35\0\1\56"+
    "\1\0\2\16\27\0\1\6\1\115\3\0\1\60\1\55"+
    "\1\56\1\0\2\16\31\0\1\116\5\0\1\116\32\0"+
    "\2\117\5\0\1\117\32\0\1\120\1\121\1\0\1\64"+
    "\3\0\1\121\35\0\1\122\36\0\1\117\1\123\5\0"+
    "\1\123\35\0\1\66\1\124\1\0\1\56\1\0\2\16"+
    "\31\0\1\116\1\0\1\71\3\0\1\116\35\0\1\71"+
    "\2\0\1\56\1\0\2\16\27\0\2\6\5\0\1\55"+
    "\52\0\1\36\30\0\1\76\1\0\2\77\1\53\26\0"+
    "\1\74\1\125\3\0\1\101\1\75\1\76\1\0\2\77"+
    "\1\53\30\0\1\126\5\0\1\126\32\0\2\127\4\0"+
    "\1\114\1\127\2\0\1\53\27\0\1\130\1\131\1\0"+
    "\1\105\3\0\1\131\35\0\1\132\36\0\1\127\1\133"+
    "\5\0\1\133\35\0\1\107\1\134\1\0\1\76\1\0"+
    "\2\77\1\53\30\0\1\126\1\0\1\112\3\0\1\126"+
    "\35\0\1\112\2\0\1\76\1\0\2\77\1\53\26\0"+
    "\2\74\5\0\1\75\45\0\1\53\26\0\1\6\1\135"+
    "\3\0\1\60\1\55\1\56\1\0\2\16\31\0\1\136"+
    "\5\0\1\136\42\0\1\137\31\0\1\120\1\140\1\0"+
    "\1\64\3\0\1\140\35\0\1\120\46\0\1\141\34\0"+
    "\1\71\35\0\1\74\1\142\3\0\1\101\1\75\1\76"+
    "\1\0\2\77\1\53\30\0\1\143\5\0\1\143\42\0"+
    "\1\144\31\0\1\130\1\145\1\0\1\105\3\0\1\145"+
    "\35\0\1\130\46\0\1\146\34\0\1\112\35\0\2\6"+
    "\3\0\1\60\1\55\1\56\1\0\2\16\31\0\1\147"+
    "\5\0\1\147\32\0\2\150\5\0\1\150\32\0\1\120"+
    "\1\151\1\0\1\64\3\0\1\151\32\0\1\150\1\152"+
    "\5\0\1\152\31\0\2\74\3\0\1\101\1\75\1\76"+
    "\1\0\2\77\1\53\30\0\1\153\5\0\1\153\32\0"+
    "\2\154\5\0\1\154\32\0\1\130\1\155\1\0\1\105"+
    "\3\0\1\155\32\0\1\154\1\156\5\0\1\156\33\0"+
    "\1\120\5\0\1\120\42\0\1\157\31\0\1\120\1\160"+
    "\5\0\1\160\42\0\1\161\32\0\1\130\5\0\1\130"+
    "\42\0\1\162\31\0\1\130\1\163\5\0\1\163\42\0"+
    "\1\164\31\0\2\165\5\0\1\165\32\0\1\165\1\166"+
    "\5\0\1\166\32\0\2\167\5\0\1\167\32\0\1\167"+
    "\1\170\5\0\1\170\42\0\1\171\41\0\1\172\41\0"+
    "\1\173\41\0\1\174\31\0\2\175\5\0\1\175\32\0"+
    "\1\175\1\176\5\0\1\176\32\0\2\177\5\0\1\177"+
    "\32\0\1\177\1\200\5\0\1\200\42\0\1\120\41\0"+
    "\1\201\41\0\1\130\41\0\1\202\32\0\1\203\5\0"+
    "\1\203\33\0\1\204\5\0\1\204\42\0\1\205\41\0"+
    "\1\206\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\11\5\1\2\11\1\1\6\11\1\1"+
    "\12\11\1\1\3\11\5\1\1\11\2\1\2\11\3\1"+
    "\1\0\6\1\2\0\1\1\10\0\5\1\6\0\1\1"+
    "\2\0\1\11\3\1\4\0\1\11\3\1\1\0\5\1"+
    "\1\0\5\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\5\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer aux = new StringBuffer();
     	int auxLinea = 0;
     	int auxColumna = 0;
	String varAux="";
	String posibleLF="";
	String acronimo="";
	FormaLargaWithAc acWLf=new FormaLargaWithAc ();
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {  return new Symbol(sym.EOF, null); 
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { posibleLF=yytext();
				yybegin(estado1);
				acWLf.clean();
				acWLf.setFormaLarga(posibleLF);
				System.out.println("lf");
            } 
            // fall through
          case 30: break;
          case 2: 
            { System.err.println("Error lexico: caracter no reconocido <" + yytext() + "> en la linea " + (yyline+1) 
	+ " y columna " + (yycolumn +1));
            } 
            // fall through
          case 31: break;
          case 3: 
            { return new Symbol(sym.acronimo,yyline +1, yycolumn +1,yytext());
            } 
            // fall through
          case 32: break;
          case 4: 
            { //barra -
				;
            } 
            // fall through
          case 33: break;
          case 5: 
            { //Simbolo dos puntos
				;
            } 
            // fall through
          case 34: break;
          case 6: 
            { System.out.println("space");
            } 
            // fall through
          case 35: break;
          case 7: 
            { //Si detecta frases explicatorias entre parentesis
				;
            } 
            // fall through
          case 36: break;
          case 8: 
            { //Si hay acronimos en una frase no detectara el parentesis, pues al principio estaba en el estado 1
				yypushback(yytext().length());
				yybegin(estado1);
            } 
            // fall through
          case 37: break;
          case 9: 
            { //comillas latinas cierre
				;
            } 
            // fall through
          case 38: break;
          case 10: 
            { //Simbolo micro
				;
            } 
            // fall through
          case 39: break;
          case 11: 
            { //comillas latinas apertura
				;
            } 
            // fall through
          case 40: break;
          case 12: 
            { //comilla simple
				;
            } 
            // fall through
          case 41: break;
          case 13: 
            { //asterisco
				;
            } 
            // fall through
          case 42: break;
          case 14: 
            { //Simbolo menor que
				;
            } 
            // fall through
          case 43: break;
          case 15: 
            { //Simbolo registro
				;
            } 
            // fall through
          case 44: break;
          case 16: 
            { //Simbolo grados
				;
            } 
            // fall through
          case 45: break;
          case 17: 
            { //Simbolo ordinal
				;
            } 
            // fall through
          case 46: break;
          case 18: 
            { //Porcentaje
				;
            } 
            // fall through
          case 47: break;
          case 19: 
            { //Comilla "
				;
            } 
            // fall through
          case 48: break;
          case 20: 
            { //Sumatorio
				;
            } 
            // fall through
          case 49: break;
          case 21: 
            { ;
            } 
            // fall through
          case 50: break;
          case 22: 
            { acronimo=""; posibleLF="";
            } 
            // fall through
          case 51: break;
          case 23: 
            { //Barra / 
			;
            } 
            // fall through
          case 52: break;
          case 24: 
            { String b=yytext();
			if(b!=null){
				yypushback(b.length());
				acWLf.clean();
			}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 53: break;
          case 25: 
            { yybegin(estado2);
		System.out.println("pa");
            } 
            // fall through
          case 54: break;
          case 26: 
            { if(yytext()!=null){
			yypushback(yytext().length());
			acWLf.clean();}
			yybegin(YYINITIAL);
            } 
            // fall through
          case 55: break;
          case 27: 
            { acronimo=yytext();
			acWLf.setAcronimo(acronimo);
			yybegin(estado3);
			System.out.println("ac");
            } 
            // fall through
          case 56: break;
          case 28: 
            { yybegin(YYINITIAL); acWLf.clean();
            } 
            // fall through
          case 57: break;
          case 29: 
            { yybegin(YYINITIAL);
		System.out.println("pc");
		//Cuidado si le paso el objeto en el sintactico lo usa como puntero y solo se guarda la ultima ocurrencia. Por ello new Object
		return new Symbol(sym.acWithLf,yyline+1,yycolumn+1,new FormaLargaWithAc(acWLf.getAcronimo(),acWLf.getFormaLarga()));
            } 
            // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
